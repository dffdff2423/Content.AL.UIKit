// This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
// If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

using Content.AL.UIKit.Colorspace;
using Content.AL.UIKit.Widgets;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Graphics;
using Robust.Shared.Prototypes;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.PixelFormats;

namespace Content.AL.UIKit.Windows;

[GenerateTypedNameReferences]
public sealed partial class ALZoo : Window
{
    [Dependency] private readonly IPrototypeManager _proto = default!;
    [Dependency] private readonly IClyde _clyde = default!;

    private readonly ShaderInstance? _shader;
    
    public ALZoo()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        if (_proto.TryIndex<ShaderPrototype>("ALZooDemoShader", out var s))
        {
            _shader = s.Instance();
        }

        var src = new Image<Rgba32>(360, 32);

        for (var i = 0; i < 360; i++)
        {
            var c = new OklabColor();
            c.SetHueChroma(Angle.FromDegrees(i), 0.2f);
            c.L = 0.6f;
            c.Alpha = 1.0f;

            for (var j = 0; j < 32; j++)
            {
                src[i, j] = ((Robust.Shared.Maths.Color) c).ConvertImgSharp();
            }
        }
        
        var tex = _clyde.CreateBlankTexture<Rgba32>(new Vector2i(360, 32), "Oklab example ALZoo", new TextureLoadParameters());
        tex.SetSubImage(Vector2i.Zero, src);
        TextureR.Texture = tex;
    }

    protected override void EnteredTree()
    {
        base.EnteredTree();
        Backbuffer.Shader = _shader;
    }
}
